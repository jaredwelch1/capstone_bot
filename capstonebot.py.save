import os
import time
from slackclient import SlackClient

# ID of bot

BOT_ID = os.environ.get('BOT_ID')

# Constants

AT_BOT = "<@" + BOT_ID + ">"

# instantiate slack and Twilio clients 

slack_client = SlackClient(os.environ.get('bot_token'))


if __name__ == "__main__":
	READ_WEBSOCKET_DELAY = 1
	if slack_client.rtm_connect():
		print("Capstone bot connected and running")
		while True:
			command, channel = parse_slack_output(slack_client.rtm_read())
			if command and channel:
				handle_command(command, channel)
			time.sleep(READ_WEBSOCKET_DELAY)
	else:
		print("connecting failed")


def handle_command(command, channel):
	'''
		Receives commands directed at bot and determines if valid
	'''

	response = "Not sure what you mean. Use the *" + EXAMPLE_COMMAND + \
		"* command with numbers, delmited by spaces."

	if command.startswith(EXAMPLE_COMMAND):
		response = "Sure... write some more code and I can do that"
	slack_client.api_call("chat.postMessage", channel=channel, text=response, as_user=True)

def parse_slack_output(slack_rtm_output):
    """
        The Slack Real Time Messaging API is an events firehose.
        this parsing function returns None unless a messageis
        directed at the Bot, based on its ID.
    """
    output_list = slack_rtm_output
    if output_list and len(output_list) > 0:
        for output in output_list:
            if output and 'text' in output and AT_BOT in output['text']:
                # return text after the @ mention, whitespace removed
                return output['text'].split(AT_BOT)[1].strip().lower(), \
                       output['channel']
    return None, None
